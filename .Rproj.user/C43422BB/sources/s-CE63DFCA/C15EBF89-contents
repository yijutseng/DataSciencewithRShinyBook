# 介面與效能測試 {#test}

## 介面測試




shinytest

```{r eval=F}
library(devtools)
install_github("rstudio/shinytest")
shinytest::installDependencies()
```

```{r eval=F}
library(shinytest)

# Launch the target app (replace with the correct path)
recordTest("path/to/app")
```


## 效能測試

Shiny App的效能測試通常是**基準測試 Benchmark**、**效能分析 Analyze**、**建議解決方案 Recommend**、**程式最佳化 Optimize**四個步驟的循環 ( [參考資料](https://tailrecursion.com/slides/fast-shiny/){target="_blank"} ): 

1. **基準測試 Benchmark**: 以一般使用者的使用方式測試系統，如果感覺不夠快，就進到下一步。若想測試多人同時使用的情境，可使用`shinyloadtest`套件[@R-shinyloadtest]進行測試
2. **效能分析 Analyze**: 利用工具 (如`profvis` [@R-profvis])計算每一步所花時間，找到最花時間的步驟，可能是讀檔、計算、網路連線等
3. **建議解決方案 Recommend**: 針對最花時間的步驟，研擬解決的辦法，包括**限制使用者的行為**或是**最佳化 (Optimize)程式**
4. **程式最佳化 Optimize**: 
  - 需要的資料不要每次啟動應用程式都重新下載並處理，可先完成，若資料很大，建議先做預處理，不要在Shiny App中讀取大檔案
  - 注意dplyr::group_by()的使用順序，盡量在filter之後
  - 若需讀格式單純的檔案，csv比rds快
  - 若Shiny App中有一些圖是使用者會重複得到的輸出結果，可考慮用`plotCache()`存快取
  - 因放在server中的程式碼是每個session都會執行一次，

完成測試後，就能將Shiny App正式部屬(Deploy)上線。

### 基準測試 Benchmark

run app
record
playback
analyze

要開兩個R session，第一個session跑Shiny App，第二個session跑shinyloadtest


### 效能分析 Analyze

profiling

花時間的程式碼，如讀檔，grouping，aggregation等，可以在Shiny App執行前就將檔案準備好，例如把可以先跑的程式碼寫在獨立的R Script中，用排程的方式已固定的頻率重新執行，以更新資料

### 程式最佳化 Optimize


plot caching
畫圖很慢
有一些圖是蠻多使用者在使用Shiny App的時候會得到的輸出結果

```{r eval=F}
renderCachedPlot({
  
},cacheKeyExpr = {
  
})
renderPlot()
```


shinyloadtest
profvis

Async

shinyloadtest -> profvis -> Optimize -> Deploy


shinyloadtest






## 參考資料

- [Getting started with shinytest](https://rstudio.github.io/shinytest/articles/shinytest.html){target="_blank"}
- [Shiny in Production](http://bit.ly/shiny-prod-book){target="_blank"}
- [Make Shiny Fast](https://tailrecursion.com/slides/fast-shiny/){target="_blank"}